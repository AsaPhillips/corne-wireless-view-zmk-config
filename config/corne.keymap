/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>



/* @TODO
[ ] Key repeate for thumb buttons
[ ] Key repeate for home row mods!
[ ] Look into cross-hand only modifiers? I don't know what that even is!
[ ] Look into quick-tap-ms to get key repeate?
[ ] Figure out how I do caps word currently? 
[ ] Figure out how to replace CG_TOGG in ZMK, to support both win and macos
*/

// Layer Def
#define BASE  0
#define MBO   1
#define CODE  2
#define NAV   3
#define MOUSE 4
#define SYM   5
#define NUM   6
#define FUN   7


// MIRYOKU_CLIPBOARD_WIN
#define U_RDO &kp LC(Y)
#define U_PST &kp LC(V)
#define U_CPY &kp LC(C)
#define U_CUT &kp LC(X)
#define U_UND &kp LC(Z)



/ {
        behaviors {
                hm: homerow_mods {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOMEROW_MODS";
                        #binding-cells = <2>;
                        tapping-term-ms = <200>;
                        quick-tap-ms = <50>; // @TEST
                        flavor = "tap-preferred";
                        bindings = <&kp>, <&kp>;
                };
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "Base";
                        bindings = <
   &kp TAB   &kp Q      &kp W      &kp E       &kp R       &kp T      &kp Y     &kp U       &kp I       &kp O      &kp P          &none
   &kp ESC   &hm LGUI A &hm LALT S &hm LCTRL D &hm LSHFT F &kp G      &kp H     &hm RSHFT J &hm RCTRL K &hm RALT L &hm RGUI SEMI &kp SQT
   &kp LSHFT &kp Z      &kp X      &kp C       &kp V       &kp B      &kp N     &kp M       &kp COMMA   &kp DOT    &kp FSLH       &none
                                   &kp ESC     &mo NAV     &kp TAB    &kp ENTER &mo 2       &kp DELETE
                        >;
                };

                nav_layer {
                        label = "Nav";
                        bindings = <
   &trans &trans   &trans   &trans    &trans    &trans    &kp U_CPY  &kp U_UND     &kp U_RDO &kp U_CUT &kp U_PST  &trans
   &trans &kp LGUI &kp LALT &kp LCTRL &kp LSHFT &trans    &kp LEFT   &kp DOWN      &kp UP    &kp RIGHT &kp CAPS   &trans
   &trans &trans   &trans   &trans    &trans    &trans    &kp HOME   &kp PG_DN     &kp PG_UP &kp END   &kp INSERT &trans
                            &trans    &trans    &trans    &kp ENTER  &kp BACKSPACE &kp DELETE
                        >;
                };

//    &trans &trans   &trans   &trans    &trans    &trans    &trans &trans &trans &trans &trans &trans
//    &trans &kp LGUI &kp LALT &kp LCTRL &kp LSHFT &trans    &trans &trans &trans &trans &trans &trans
//    &trans &trans   &trans   &trans    &trans    &trans    &trans &trans &trans &trans &trans &trans
//                             &trans    &trans    &trans    &kp ENTER  &kp BACKSPACE &kp DELETE

// @TODO put BT smewhere!
//    &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        label = "Raise";
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                    	     &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };
        };
};
